AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: AppAnalytics cloudformation Template
Parameters:
  CopyBucket:
    Type: String
    Default: Enter path of S3 Copy bucket with folder (excluding s3://) e.g. appanalytics/dailyraw
  SfdcUserName:
    Type: String
    Default: Enter salesforce username
  SfdcPassword:
    Type: String
    Default: Enter salesforce password with security token appended
  SfdcURL:
    Type: String
    Default: https://login.salesforce.com
    Description: Put your production or sandbox SFDC URL
  NotificationEmail:
    Type: String
    Description: kamlesh.patel@salesforce.com
  DailyBatchPayload:
    Type: String
    Default: '{"AppName": "CaseTimer", "packages": "0331U000000EHq2", "IsBatchEvent":
      true}'
    Description: Change the name of the app and packages
Resources:
  AAJsLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: aa-app-dependencies
      Description: Dependencies for aa app
      ContentUri: s3://kamicodebucket/29a042eaf1cfb420ef8a0f1c9f0116c0
      CompatibleRuntimes:
      - nodejs8.10
      - nodejs10.x
      LicenseInfo: MIT
      RetentionPolicy: Retain
  ScheduledRule:
    Type: AWS::Events::Rule
    Properties:
      Description: AAScheduledRule
      ScheduleExpression: rate(1 day)
      State: ENABLED
      Targets:
      - Arn:
          Fn::GetAtt:
          - InitiateAARequestFunction
          - Arn
        Input:
          Ref: DailyBatchPayload
        Id: AABatchEvent
  PermissionForEventsToInvokeLambda:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Ref: InitiateAARequestFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn:
        Fn::GetAtt:
        - ScheduledRule
        - Arn
  SNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      Subscription:
      - Endpoint:
          Ref: NotificationEmail
        Protocol: email
  StatesExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - Fn::Sub: states.${AWS::Region}.amazonaws.com
          Action: sts:AssumeRole
      Path: /
      Policies:
      - PolicyName: StatesExecutionPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - lambda:InvokeFunction
            Resource: '*'
          - Effect: Allow
            Action:
            - sns:Publish
            Resource:
            - Ref: SNSTopic
  AppAnalyticsDoCopyFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: AppAnalyticsDoCopyFunction
      CodeUri: s3://kamicodebucket/e9fd96255c0f4d0b1ea7e36cbcb48aa8
      Handler: aacopyfile.lambdaHandler
      Runtime: nodejs10.x
      Timeout: 180
      MemorySize: 512
      Layers:
      - Ref: AAJsLayer
      Environment:
        Variables:
          CopyBucket:
            Ref: CopyBucket
      Policies:
      - AWSLambdaExecute
      - AWSLambdaRole
      - Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - s3:PutObject
          Resource: arn:aws:s3:::aa-daily-original/*
  InitiateAARequestFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: InitiateAARequestFunction
      CodeUri: s3://kamicodebucket/e9fd96255c0f4d0b1ea7e36cbcb48aa8
      Handler: aainitiate.lambdaHandler
      Runtime: nodejs10.x
      Timeout: 10
      Environment:
        Variables:
          statemachine_arn:
            Ref: AAStateMachine
      Policies:
      - AWSLambdaExecute
      - AWSLambdaRole
      - Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - states:StartExecution
          Resource: '*'
      Events:
        AARequestEvent:
          Type: Api
          Properties:
            Path: /initiateaa
            Method: post
  SfdcLoginFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: SfdcLoginFunction
      CodeUri: s3://kamicodebucket/e9fd96255c0f4d0b1ea7e36cbcb48aa8
      Handler: sfdclogin.lambdaHandler
      Runtime: nodejs10.x
      Layers:
      - Ref: AAJsLayer
      Timeout: 10
      Environment:
        Variables:
          SfdcUserName:
            Ref: SfdcUserName
          SfdcPassword:
            Ref: SfdcPassword
          SfdcURL:
            Ref: SfdcURL
  SfdcNewAARequestFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: SfdcNewAARequestFunction
      CodeUri: s3://kamicodebucket/e9fd96255c0f4d0b1ea7e36cbcb48aa8
      Handler: sfdcnewaarequest.lambdaHandler
      Runtime: nodejs10.x
      Timeout: 10
      Layers:
      - Ref: AAJsLayer
  SfdcAARequestStatusFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: SfdcAARequestStatusFunction
      CodeUri: s3://kamicodebucket/e9fd96255c0f4d0b1ea7e36cbcb48aa8
      Handler: sfdcaarequeststatus.lambdaHandler
      Runtime: nodejs10.x
      Timeout: 10
      Layers:
      - Ref: AAJsLayer
  AAStateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      DefinitionString:
        Fn::Sub:
        - "{\n  \"Comment\": \"Copy AA file to bucket\",\n  \"StartAt\": \"SFDCLogin\"\
          ,\n  \"States\": {                   \n    \"SFDCLogin\": {\n      \"Type\"\
          : \"Task\",\n      \"Resource\": \"${lambdaSfdcLoginFunctionArn}\",\n  \
          \    \"ResultPath\": \"$.sfdc\",\n      \"Next\": \"NewAARequest\",\n  \
          \    \"Catch\": [ {\n                \"ErrorEquals\": [ \"LoginError\",\
          \  \"States.TaskFailed\" ],\n                  \"Next\": \"PublishSNS\"\n\
          \              } ]                  \n    },\n    \"NewAARequest\": {\n\
          \      \"Type\": \"Task\",\n      \"Resource\": \"${lambdaAANewRequestArn}\"\
          ,\n      \"ResultPath\": \"$.aareq\",\n      \"Next\": \"WaitBeforePoll\"\
          ,\n      \"Catch\": [ {\"ErrorEquals\": [ \"NewAARequestError\",  \"States.TaskFailed\"\
          \ ],\n                              \"Next\": \"PublishSNS\"} ]        \
          \ \n    },\n    \"WaitBeforePoll\": {\n      \"Type\": \"Wait\",\n     \
          \ \"Seconds\": 240,\n      \"Next\": \"PollAARequest\"\n    },       \n\
          \    \"PollAARequest\": {\n      \"Type\": \"Task\",\n      \"Resource\"\
          : \"${lambdaAAStatusArn}\",\n      \"ResultPath\": \"$.aarecord\",\n   \
          \   \"Next\": \"StatusCheck\",\n      \"Catch\": [ {\"ErrorEquals\": [ \"\
          PollAARequestError\",  \"States.TaskFailed\" ],\n                      \
          \        \"Next\": \"PublishSNS\"} ]               \n    },\n    \"StatusCheck\"\
          : {\n      \"Type\": \"Choice\",\n      \"Choices\": [\n        {\n    \
          \      \"Not\": {\n            \"Variable\": \"$.aarecord.res[0].RequestState\"\
          ,\n            \"StringEquals\": \"Complete\"\n          },\n          \"\
          Next\": \"AARequestStateError\"\n        }\n      ],\n      \"Default\"\
          : \"CopyFile\"\n    },   \n    \"AARequestStateError\": {\n      \"Type\"\
          : \"Pass\",\n      \"Result\": {\"Cause\": \"AA request record state is\
          \ other than complete\", \"Error\":     \"AARequest State Error\"},\n  \
          \    \"Next\": \"PublishSNS\"\n    },   \n    \"CopyFile\": {\n      \"\
          Type\": \"Task\",\n      \"Resource\":  \"${lambdaDoCopyFileArn}\",\n  \
          \    \"TimeoutSeconds\": 300,\n      \"HeartbeatSeconds\": 60,         \
          \         \n        \"ResultPath\": \"$.copyres\",\n      \"Next\": \"PublishSuccessSNS\"\
          ,\n      \"Catch\": [ {\"ErrorEquals\": [ \"CopyFileError\",  \"States.TaskFailed\"\
          \ ],\n                              \"Next\": \"PublishSNS\"} ]        \
          \       \n    },\n    \"PublishSNS\": {\n      \"Type\": \"Task\",\n   \
          \   \"Resource\": \"arn:aws:states:::sns:publish\",                  \n\
          \      \"Parameters\": {\n        \"TopicArn\": \"${SNSTopic}\",\n     \
          \    \"Subject.$\": \"$.Error\",\n        \"Message.$\": \"$.Cause\"\n \
          \     },\n      \"End\": true\n    },                \n    \"PublishSuccessSNS\"\
          : {\n      \"Type\": \"Task\",\n      \"Resource\": \"arn:aws:states:::sns:publish\"\
          ,                  \n      \"Parameters\": {\n        \"TopicArn\": \"${SNSTopic}\"\
          ,\n        \"Subject.$\": \"$.AppName\",\n        \"Message.$\": \"$.startDate\"\
          \n      },\n      \"End\": true\n    }                                 \
          \          \n  }\n}"
        - lambdaAANewRequestArn:
            Fn::GetAtt:
            - SfdcNewAARequestFunction
            - Arn
          lambdaSfdcLoginFunctionArn:
            Fn::GetAtt:
            - SfdcLoginFunction
            - Arn
          lambdaAAStatusArn:
            Fn::GetAtt:
            - SfdcAARequestStatusFunction
            - Arn
          lambdaDoCopyFileArn:
            Fn::GetAtt:
            - AppAnalyticsDoCopyFunction
            - Arn
          SNSTopic:
            Ref: SNSTopic
      RoleArn:
        Fn::GetAtt:
        - StatesExecutionRole
        - Arn
Outputs:
  AAStateMachine:
    Description: AA  Step Functions State Machine ARN
    Value:
      Ref: AAStateMachine
  SNSTopic:
    Description: SNS Topic ARN
    Value:
      Ref: SNSTopic
